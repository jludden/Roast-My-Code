directive @embedded on OBJECT
directive @collection(name: String!) on OBJECT
directive @index(name: String!) on FIELD_DEFINITION
directive @resolver(
  name: String
  paginated: Boolean! = false
) on FIELD_DEFINITION
directive @relation(name: String) on FIELD_DEFINITION
directive @unique(index: String) on FIELD_DEFINITION
type Comment {
  # The document's ID.
  _id: ID!
  # The document's timestamp.
  _ts: Long!
  text: String!
  list: CommentList
}

# 'Comment' input values
input CommentInput {
  text: String!
  list: CommentListRelation
}

type CommentList {
  # The document's ID.
  _id: ID!
  # The document's timestamp.
  _ts: Long!
  comments(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): CommentPage!
  document: Document
}

# Allow manipulating the relationship between the types 'CommentList' and 'Comment'.
input CommentListCommentsRelation {
  # Create one or more documents of type 'Comment' and associate them with the current document.
  create: [CommentInput]
  # Connect one or more documents of type 'Comment' with the current document using their IDs.
  connect: [ID]
  # Disconnect the given documents of type 'Comment' from the current document using their IDs.
  disconnect: [ID]
}

# Allow manipulating the relationship between the types 'CommentList' and 'Document' using the field 'CommentList.document'.
input CommentListDocumentRelation {
  # Create a document of type 'Document' and associate it with the current document.
  create: DocumentInput
  # Connect a document of type 'Document' with the current document using its ID.
  connect: ID
  # If true, disconnects this document from 'Document'
  disconnect: Boolean
}

# 'CommentList' input values
input CommentListInput {
  comments: CommentListCommentsRelation
  document: CommentListDocumentRelation
}

# The pagination object for elements of type 'CommentList'.
type CommentListPage {
  # The elements of type 'CommentList' in this page.
  data: [CommentList]!
  # A cursor for elements coming after the current page.
  after: String
  # A cursor for elements coming before the current page.
  before: String
}

# Allow manipulating the relationship between the types 'Comment' and 'CommentList' using the field 'Comment.list'.
input CommentListRelation {
  # Create a document of type 'CommentList' and associate it with the current document.
  create: CommentListInput
  # Connect a document of type 'CommentList' with the current document using its ID.
  connect: ID
  # If true, disconnects this document from 'CommentList'
  disconnect: Boolean
}

# The pagination object for elements of type 'Comment'.
type CommentPage {
  # The elements of type 'Comment' in this page.
  data: [Comment]!
  # A cursor for elements coming after the current page.
  after: String
  # A cursor for elements coming before the current page.
  before: String
}

scalar Date

type Document {
  repository: Repository
  # The document's ID.
  _id: ID!
  commentsList(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): CommentListPage!
  title: String!
  # The document's timestamp.
  _ts: Long!
}

# Allow manipulating the relationship between the types 'Document' and 'CommentList'.
input DocumentCommentsListRelation {
  # Create one or more documents of type 'CommentList' and associate them with the current document.
  create: [CommentListInput]
  # Connect one or more documents of type 'CommentList' with the current document using their IDs.
  connect: [ID]
  # Disconnect the given documents of type 'CommentList' from the current document using their IDs.
  disconnect: [ID]
}

# 'Document' input values
input DocumentInput {
  title: String!
  commentsList: DocumentCommentsListRelation
  repository: DocumentRepositoryRelation
}

# The pagination object for elements of type 'Document'.
type DocumentPage {
  # The elements of type 'Document' in this page.
  data: [Document]!
  # A cursor for elements coming after the current page.
  after: String
  # A cursor for elements coming before the current page.
  before: String
}

# Allow manipulating the relationship between the types 'Document' and 'Repository' using the field 'Document.repository'.
input DocumentRepositoryRelation {
  # Create a document of type 'Repository' and associate it with the current document.
  create: RepositoryInput
  # Connect a document of type 'Repository' with the current document using its ID.
  connect: ID
  # If true, disconnects this document from 'Repository'
  disconnect: Boolean
}

# The `Long` scalar type represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

type Mutation {
  # Create a new document in the collection of 'Todo'
  createTodo(
    # 'Todo' input values
    data: TodoInput!
  ): Todo!
  # Create a new document in the collection of 'TodoList'
  createTodoList(
    # 'TodoList' input values
    data: TodoListInput!
  ): TodoList!
  # Update an existing document in the collection of 'Comment'
  updateComment(
    # The 'Comment' document's ID
    id: ID!
    # 'Comment' input values
    data: CommentInput!
  ): Comment
  # Create a new document in the collection of 'CommentList'
  createCommentList(
    # 'CommentList' input values
    data: CommentListInput!
  ): CommentList!
  # Delete an existing document in the collection of 'Comment'
  deleteComment(
    # The 'Comment' document's ID
    id: ID!
  ): Comment
  # Update an existing document in the collection of 'CommentList'
  updateCommentList(
    # The 'CommentList' document's ID
    id: ID!
    # 'CommentList' input values
    data: CommentListInput!
  ): CommentList
  # Delete an existing document in the collection of 'TodoList'
  deleteTodoList(
    # The 'TodoList' document's ID
    id: ID!
  ): TodoList
  # Delete an existing document in the collection of 'Todo'
  deleteTodo(
    # The 'Todo' document's ID
    id: ID!
  ): Todo
  # Create a new document in the collection of 'Repository'
  createRepository(
    # 'Repository' input values
    data: RepositoryInput!
  ): Repository!
  # Delete an existing document in the collection of 'Repository'
  deleteRepository(
    # The 'Repository' document's ID
    id: ID!
  ): Repository
  # Create a new document in the collection of 'Document'
  createDocument(
    # 'Document' input values
    data: DocumentInput!
  ): Document!
  # Create a new document in the collection of 'Comment'
  createComment(
    # 'Comment' input values
    data: CommentInput!
  ): Comment!
  # Update an existing document in the collection of 'Repository'
  updateRepository(
    # The 'Repository' document's ID
    id: ID!
    # 'Repository' input values
    data: RepositoryInput!
  ): Repository
  # Delete an existing document in the collection of 'Document'
  deleteDocument(
    # The 'Document' document's ID
    id: ID!
  ): Document
  # Delete an existing document in the collection of 'CommentList'
  deleteCommentList(
    # The 'CommentList' document's ID
    id: ID!
  ): CommentList
  # Update an existing document in the collection of 'Document'
  updateDocument(
    # The 'Document' document's ID
    id: ID!
    # 'Document' input values
    data: DocumentInput!
  ): Document
  # Update an existing document in the collection of 'TodoList'
  updateTodoList(
    # The 'TodoList' document's ID
    id: ID!
    # 'TodoList' input values
    data: TodoListInput!
  ): TodoList
  # Update an existing document in the collection of 'Todo'
  updateTodo(
    # The 'Todo' document's ID
    id: ID!
    # 'Todo' input values
    data: TodoInput!
  ): Todo
}

type Query {
  allTodos(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): TodoPage!
  allTodoLists(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): TodoListPage!
  allLists(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): TodoListPage!
  # Find a document from the collection of 'TodoList' by its id.
  findTodoListByID(
    # The 'TodoList' document's ID
    id: ID!
  ): TodoList
  allComments(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): CommentPage!
  # Find a document from the collection of 'CommentList' by its id.
  findCommentListByID(
    # The 'CommentList' document's ID
    id: ID!
  ): CommentList
  todosByCompletedFlag(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
    completed: Boolean!
  ): TodoPage!
  allCommentLists(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): CommentListPage!
  # Find a document from the collection of 'Document' by its id.
  findDocumentByID(
    # The 'Document' document's ID
    id: ID!
  ): Document
  # Find a document from the collection of 'Todo' by its id.
  findTodoByID(
    # The 'Todo' document's ID
    id: ID!
  ): Todo
  # Find a document from the collection of 'Comment' by its id.
  findCommentByID(
    # The 'Comment' document's ID
    id: ID!
  ): Comment
  # Find a document from the collection of 'Repository' by its id.
  findRepositoryByID(
    # The 'Repository' document's ID
    id: ID!
  ): Repository
}

type Repository {
  # The document's ID.
  _id: ID!
  # The document's timestamp.
  _ts: Long!
  title: String!
  documentsList(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): DocumentPage!
}

# Allow manipulating the relationship between the types 'Repository' and 'Document'.
input RepositoryDocumentsListRelation {
  # Create one or more documents of type 'Document' and associate them with the current document.
  create: [DocumentInput]
  # Connect one or more documents of type 'Document' with the current document using their IDs.
  connect: [ID]
  # Disconnect the given documents of type 'Document' from the current document using their IDs.
  disconnect: [ID]
}

# 'Repository' input values
input RepositoryInput {
  title: String!
  documentsList: RepositoryDocumentsListRelation
}

scalar Time

type Todo {
  # The document's ID.
  _id: ID!
  completed: Boolean!
  title: String!
  list: TodoList
  # The document's timestamp.
  _ts: Long!
}

# 'Todo' input values
input TodoInput {
  title: String!
  completed: Boolean!
  list: TodoListRelation
}

type TodoList {
  # The document's ID.
  _id: ID!
  # The document's timestamp.
  _ts: Long!
  title: String!
  todos(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): TodoPage!
}

# 'TodoList' input values
input TodoListInput {
  title: String!
  todos: TodoListTodosRelation
}

# The pagination object for elements of type 'TodoList'.
type TodoListPage {
  # The elements of type 'TodoList' in this page.
  data: [TodoList]!
  # A cursor for elements coming after the current page.
  after: String
  # A cursor for elements coming before the current page.
  before: String
}

# Allow manipulating the relationship between the types 'Todo' and 'TodoList' using the field 'Todo.list'.
input TodoListRelation {
  # Create a document of type 'TodoList' and associate it with the current document.
  create: TodoListInput
  # Connect a document of type 'TodoList' with the current document using its ID.
  connect: ID
  # If true, disconnects this document from 'TodoList'
  disconnect: Boolean
}

# Allow manipulating the relationship between the types 'TodoList' and 'Todo'.
input TodoListTodosRelation {
  # Create one or more documents of type 'Todo' and associate them with the current document.
  create: [TodoInput]
  # Connect one or more documents of type 'Todo' with the current document using their IDs.
  connect: [ID]
  # Disconnect the given documents of type 'Todo' from the current document using their IDs.
  disconnect: [ID]
}

# The pagination object for elements of type 'Todo'.
type TodoPage {
  # The elements of type 'Todo' in this page.
  data: [Todo]!
  # A cursor for elements coming after the current page.
  after: String
  # A cursor for elements coming before the current page.
  before: String
}

